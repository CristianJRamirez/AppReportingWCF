package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.MostradorService;
//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/15/2017 9:13:06 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.MostradorService.CodigoPostal;
import package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.MostradorService.TipoVia;
import package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.MostradorService.VectorByte;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Calle implements KvmSerializable {
    
    public CodigoPostal codigoPostal;
    public long fK_IdCodigoPostal;
    public boolean fK_IdCodigoPostalSpecified;
    public long fK_IdTipoVia;
    public boolean fK_IdTipoViaSpecified;
    public long idCalle;
    public boolean idCalleSpecified;
    public int impMax;
    public boolean impMaxSpecified;
    public int impMin;
    public boolean impMinSpecified;
    public int parMax;
    public boolean parMaxSpecified;
    public int parMin;
    public boolean parMinSpecified;
    public boolean publicado;
    public boolean publicadoSpecified;
    public TipoVia tipoVia;
    public String via;
    public String fechaModificacion;
    public boolean fechaModificacionSpecified;
    public VectorByte timestamp;
    public long usuarioModificacion;
    public boolean usuarioModificacionSpecified;
    public String id;
    public String ref;
    
    public Calle(){}
    
    public Calle(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CodigoPostal"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("CodigoPostal");
            codigoPostal =  new CodigoPostal (j);
            
        }
        if (soapObject.hasProperty("FK_IdCodigoPostal"))
        {
            Object obj = soapObject.getProperty("FK_IdCodigoPostal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fK_IdCodigoPostal = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fK_IdCodigoPostal = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("FK_IdCodigoPostalSpecified"))
        {
            Object obj = soapObject.getProperty("FK_IdCodigoPostalSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fK_IdCodigoPostalSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fK_IdCodigoPostalSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("FK_IdTipoVia"))
        {
            Object obj = soapObject.getProperty("FK_IdTipoVia");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fK_IdTipoVia = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                fK_IdTipoVia = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("FK_IdTipoViaSpecified"))
        {
            Object obj = soapObject.getProperty("FK_IdTipoViaSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fK_IdTipoViaSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fK_IdTipoViaSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("IdCalle"))
        {
            Object obj = soapObject.getProperty("IdCalle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idCalle = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                idCalle = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IdCalleSpecified"))
        {
            Object obj = soapObject.getProperty("IdCalleSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idCalleSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idCalleSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ImpMax"))
        {
            Object obj = soapObject.getProperty("ImpMax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                impMax = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                impMax = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ImpMaxSpecified"))
        {
            Object obj = soapObject.getProperty("ImpMaxSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                impMaxSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                impMaxSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ImpMin"))
        {
            Object obj = soapObject.getProperty("ImpMin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                impMin = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                impMin = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ImpMinSpecified"))
        {
            Object obj = soapObject.getProperty("ImpMinSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                impMinSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                impMinSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ParMax"))
        {
            Object obj = soapObject.getProperty("ParMax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parMax = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parMax = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ParMaxSpecified"))
        {
            Object obj = soapObject.getProperty("ParMaxSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parMaxSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parMaxSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ParMin"))
        {
            Object obj = soapObject.getProperty("ParMin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parMin = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                parMin = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ParMinSpecified"))
        {
            Object obj = soapObject.getProperty("ParMinSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parMinSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parMinSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Publicado"))
        {
            Object obj = soapObject.getProperty("Publicado");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                publicado = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                publicado = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PublicadoSpecified"))
        {
            Object obj = soapObject.getProperty("PublicadoSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                publicadoSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                publicadoSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("TipoVia"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("TipoVia");
            tipoVia =  new TipoVia (j);
            
        }
        if (soapObject.hasProperty("Via"))
        {
            Object obj = soapObject.getProperty("Via");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                via = j.toString();
            }else if (obj!= null && obj instanceof String){
                via = (String) obj;
            }
        }
        if (soapObject.hasProperty("fechaModificacion"))
        {
            Object obj = soapObject.getProperty("fechaModificacion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fechaModificacion = j.toString();
            }else if (obj!= null && obj instanceof String){
                fechaModificacion = (String) obj;
            }
        }
        if (soapObject.hasProperty("fechaModificacionSpecified"))
        {
            Object obj = soapObject.getProperty("fechaModificacionSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fechaModificacionSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                fechaModificacionSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("timestamp"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("timestamp");
            timestamp = new VectorByte(j);
        }
        if (soapObject.hasProperty("usuarioModificacion"))
        {
            Object obj = soapObject.getProperty("usuarioModificacion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                usuarioModificacion = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                usuarioModificacion = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("usuarioModificacionSpecified"))
        {
            Object obj = soapObject.getProperty("usuarioModificacionSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                usuarioModificacionSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                usuarioModificacionSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) obj;
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return codigoPostal;
            case 1:
                return fK_IdCodigoPostal;
            case 2:
                return fK_IdCodigoPostalSpecified;
            case 3:
                return fK_IdTipoVia;
            case 4:
                return fK_IdTipoViaSpecified;
            case 5:
                return idCalle;
            case 6:
                return idCalleSpecified;
            case 7:
                return impMax;
            case 8:
                return impMaxSpecified;
            case 9:
                return impMin;
            case 10:
                return impMinSpecified;
            case 11:
                return parMax;
            case 12:
                return parMaxSpecified;
            case 13:
                return parMin;
            case 14:
                return parMinSpecified;
            case 15:
                return publicado;
            case 16:
                return publicadoSpecified;
            case 17:
                return tipoVia;
            case 18:
                return via;
            case 19:
                return fechaModificacion;
            case 20:
                return fechaModificacionSpecified;
            case 21:
                return timestamp.toString();
            case 22:
                return usuarioModificacion;
            case 23:
                return usuarioModificacionSpecified;
            case 24:
                return id;
            case 25:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 26;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = CodigoPostal.class;
                info.name = "CodigoPostal";
                break;
            case 1:
                info.type = Long.class;
                info.name = "FK_IdCodigoPostal";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "FK_IdCodigoPostalSpecified";
                break;
            case 3:
                info.type = Long.class;
                info.name = "FK_IdTipoVia";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "FK_IdTipoViaSpecified";
                break;
            case 5:
                info.type = Long.class;
                info.name = "IdCalle";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IdCalleSpecified";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ImpMax";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ImpMaxSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ImpMin";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ImpMinSpecified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ParMax";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ParMaxSpecified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ParMin";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ParMinSpecified";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Publicado";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PublicadoSpecified";
                break;
            case 17:
                info.type = TipoVia.class;
                info.name = "TipoVia";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Via";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fechaModificacion";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "fechaModificacionSpecified";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "timestamp";
                break;
            case 22:
                info.type = Long.class;
                info.name = "usuarioModificacion";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "usuarioModificacionSpecified";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 25:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
