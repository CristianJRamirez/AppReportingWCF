package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.ReportingService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 4/25/2017 7:43:53 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class QUERY_ControlOfica_Result implements KvmSerializable {
    
    public String centro;
    public int favorables_1;
    public boolean favorables_1Specified;
    public int favorables_2;
    public boolean favorables_2Specified;
    public int inspeccionados;
    public boolean inspeccionadosSpecified;
    public double porcentajeRechazados_1;
    public boolean porcentajeRechazados_1Specified;
    public double porcentajeRechazados_2;
    public boolean porcentajeRechazados_2Specified;
    public int rechazada_1;
    public boolean rechazada_1Specified;
    public int rechazada_2;
    public boolean rechazada_2Specified;
    public String tipoVehiculo;
    public String id;
    public String ref;
    
    public QUERY_ControlOfica_Result(){}
    
    public QUERY_ControlOfica_Result(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Centro"))
        {
            Object obj = soapObject.getProperty("Centro");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                centro = j.toString();
            }else if (obj!= null && obj instanceof String){
                centro = (String) obj;
            }
        }
        if (soapObject.hasProperty("Favorables_1"))
        {
            Object obj = soapObject.getProperty("Favorables_1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                favorables_1 = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                favorables_1 = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Favorables_1Specified"))
        {
            Object obj = soapObject.getProperty("Favorables_1Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                favorables_1Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                favorables_1Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Favorables_2"))
        {
            Object obj = soapObject.getProperty("Favorables_2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                favorables_2 = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                favorables_2 = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Favorables_2Specified"))
        {
            Object obj = soapObject.getProperty("Favorables_2Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                favorables_2Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                favorables_2Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Inspeccionados"))
        {
            Object obj = soapObject.getProperty("Inspeccionados");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspeccionados = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                inspeccionados = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("InspeccionadosSpecified"))
        {
            Object obj = soapObject.getProperty("InspeccionadosSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                inspeccionadosSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                inspeccionadosSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PorcentajeRechazados_1"))
        {
            Object obj = soapObject.getProperty("PorcentajeRechazados_1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                porcentajeRechazados_1 = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                porcentajeRechazados_1 = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PorcentajeRechazados_1Specified"))
        {
            Object obj = soapObject.getProperty("PorcentajeRechazados_1Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                porcentajeRechazados_1Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                porcentajeRechazados_1Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("PorcentajeRechazados_2"))
        {
            Object obj = soapObject.getProperty("PorcentajeRechazados_2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                porcentajeRechazados_2 = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                porcentajeRechazados_2 = (Double) obj;
            }
        }
        if (soapObject.hasProperty("PorcentajeRechazados_2Specified"))
        {
            Object obj = soapObject.getProperty("PorcentajeRechazados_2Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                porcentajeRechazados_2Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                porcentajeRechazados_2Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Rechazada_1"))
        {
            Object obj = soapObject.getProperty("Rechazada_1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rechazada_1 = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rechazada_1 = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Rechazada_1Specified"))
        {
            Object obj = soapObject.getProperty("Rechazada_1Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rechazada_1Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                rechazada_1Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Rechazada_2"))
        {
            Object obj = soapObject.getProperty("Rechazada_2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rechazada_2 = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rechazada_2 = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Rechazada_2Specified"))
        {
            Object obj = soapObject.getProperty("Rechazada_2Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rechazada_2Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                rechazada_2Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("TipoVehiculo"))
        {
            Object obj = soapObject.getProperty("TipoVehiculo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tipoVehiculo = j.toString();
            }else if (obj!= null && obj instanceof String){
                tipoVehiculo = (String) obj;
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) obj;
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return centro;
            case 1:
                return favorables_1;
            case 2:
                return favorables_1Specified;
            case 3:
                return favorables_2;
            case 4:
                return favorables_2Specified;
            case 5:
                return inspeccionados;
            case 6:
                return inspeccionadosSpecified;
            case 7:
                return porcentajeRechazados_1;
            case 8:
                return porcentajeRechazados_1Specified;
            case 9:
                return porcentajeRechazados_2;
            case 10:
                return porcentajeRechazados_2Specified;
            case 11:
                return rechazada_1;
            case 12:
                return rechazada_1Specified;
            case 13:
                return rechazada_2;
            case 14:
                return rechazada_2Specified;
            case 15:
                return tipoVehiculo;
            case 16:
                return id;
            case 17:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 18;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Centro";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Favorables_1";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Favorables_1Specified";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Favorables_2";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Favorables_2Specified";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Inspeccionados";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "InspeccionadosSpecified";
                break;
            case 7:
                info.type = Double.class;
                info.name = "PorcentajeRechazados_1";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PorcentajeRechazados_1Specified";
                break;
            case 9:
                info.type = Double.class;
                info.name = "PorcentajeRechazados_2";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PorcentajeRechazados_2Specified";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Rechazada_1";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Rechazada_1Specified";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Rechazada_2";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Rechazada_2Specified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TipoVehiculo";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }
    

    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
