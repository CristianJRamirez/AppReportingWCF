package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.ReportingService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 4/25/2017 7:43:53 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class QUERY_ResumenInspeccionesServicioClasificacion_Result implements KvmSerializable {
    
    public String codigoInterno;
    public String construccion;
    public int favorable;
    public boolean favorableSpecified;
    public String servicio;
    public int total;
    public boolean totalSpecified;
    public String utilizacion;
    public String id;
    public String ref;
    
    public QUERY_ResumenInspeccionesServicioClasificacion_Result(){}
    
    public QUERY_ResumenInspeccionesServicioClasificacion_Result(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CodigoInterno"))
        {
            Object obj = soapObject.getProperty("CodigoInterno");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                codigoInterno = j.toString();
            }else if (obj!= null && obj instanceof String){
                codigoInterno = (String) obj;
            }
        }
        if (soapObject.hasProperty("Construccion"))
        {
            Object obj = soapObject.getProperty("Construccion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                construccion = j.toString();
            }else if (obj!= null && obj instanceof String){
                construccion = (String) obj;
            }
        }
        if (soapObject.hasProperty("Favorable"))
        {
            Object obj = soapObject.getProperty("Favorable");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                favorable = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                favorable = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("FavorableSpecified"))
        {
            Object obj = soapObject.getProperty("FavorableSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                favorableSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                favorableSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Servicio"))
        {
            Object obj = soapObject.getProperty("Servicio");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                servicio = j.toString();
            }else if (obj!= null && obj instanceof String){
                servicio = (String) obj;
            }
        }
        if (soapObject.hasProperty("Total"))
        {
            Object obj = soapObject.getProperty("Total");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                total = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                total = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TotalSpecified"))
        {
            Object obj = soapObject.getProperty("TotalSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Utilizacion"))
        {
            Object obj = soapObject.getProperty("Utilizacion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                utilizacion = j.toString();
            }else if (obj!= null && obj instanceof String){
                utilizacion = (String) obj;
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) obj;
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return codigoInterno;
            case 1:
                return construccion;
            case 2:
                return favorable;
            case 3:
                return favorableSpecified;
            case 4:
                return servicio;
            case 5:
                return total;
            case 6:
                return totalSpecified;
            case 7:
                return utilizacion;
            case 8:
                return id;
            case 9:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 10;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CodigoInterno";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Construccion";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Favorable";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "FavorableSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Servicio";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Total";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TotalSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Utilizacion";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }
    

    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
