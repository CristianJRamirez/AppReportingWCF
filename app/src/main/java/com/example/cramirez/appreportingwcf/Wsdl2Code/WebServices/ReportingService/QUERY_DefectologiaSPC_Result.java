package com.example.cramirez.appreportingwcf.Wsdl2Code.WebServices.ReportingService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 4/25/2017 7:43:53 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class QUERY_DefectologiaSPC_Result implements KvmSerializable {
    
    public int aceptadas;
    public boolean aceptadasSpecified;
    public double c_Rechazadas;
    public boolean c_RechazadasSpecified;
    public String centro;
    public String codigoUsuarioActivo;
    public String punto;
    public int rechazadas;
    public boolean rechazadasSpecified;
    public int totales;
    public boolean totalesSpecified;
    public String capitulo;
    public String codCentro;
    public String id;
    public String ref;
    
    public QUERY_DefectologiaSPC_Result(){}
    
    public QUERY_DefectologiaSPC_Result(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Aceptadas"))
        {
            Object obj = soapObject.getProperty("Aceptadas");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                aceptadas = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                aceptadas = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("AceptadasSpecified"))
        {
            Object obj = soapObject.getProperty("AceptadasSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                aceptadasSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                aceptadasSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("C_Rechazadas"))
        {
            Object obj = soapObject.getProperty("C_Rechazadas");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                c_Rechazadas = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                c_Rechazadas = (Double) obj;
            }
        }
        if (soapObject.hasProperty("C_RechazadasSpecified"))
        {
            Object obj = soapObject.getProperty("C_RechazadasSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                c_RechazadasSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                c_RechazadasSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Centro"))
        {
            Object obj = soapObject.getProperty("Centro");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                centro = j.toString();
            }else if (obj!= null && obj instanceof String){
                centro = (String) obj;
            }
        }
        if (soapObject.hasProperty("CodigoUsuarioActivo"))
        {
            Object obj = soapObject.getProperty("CodigoUsuarioActivo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                codigoUsuarioActivo = j.toString();
            }else if (obj!= null && obj instanceof String){
                codigoUsuarioActivo = (String) obj;
            }
        }
        if (soapObject.hasProperty("Punto"))
        {
            Object obj = soapObject.getProperty("Punto");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                punto = j.toString();
            }else if (obj!= null && obj instanceof String){
                punto = (String) obj;
            }
        }
        if (soapObject.hasProperty("Rechazadas"))
        {
            Object obj = soapObject.getProperty("Rechazadas");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rechazadas = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rechazadas = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("RechazadasSpecified"))
        {
            Object obj = soapObject.getProperty("RechazadasSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rechazadasSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                rechazadasSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Totales"))
        {
            Object obj = soapObject.getProperty("Totales");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totales = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totales = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TotalesSpecified"))
        {
            Object obj = soapObject.getProperty("TotalesSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalesSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalesSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("capitulo"))
        {
            Object obj = soapObject.getProperty("capitulo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                capitulo = j.toString();
            }else if (obj!= null && obj instanceof String){
                capitulo = (String) obj;
            }
        }
        if (soapObject.hasProperty("codCentro"))
        {
            Object obj = soapObject.getProperty("codCentro");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                codCentro = j.toString();
            }else if (obj!= null && obj instanceof String){
                codCentro = (String) obj;
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) obj;
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return aceptadas;
            case 1:
                return aceptadasSpecified;
            case 2:
                return c_Rechazadas;
            case 3:
                return c_RechazadasSpecified;
            case 4:
                return centro;
            case 5:
                return codigoUsuarioActivo;
            case 6:
                return punto;
            case 7:
                return rechazadas;
            case 8:
                return rechazadasSpecified;
            case 9:
                return totales;
            case 10:
                return totalesSpecified;
            case 11:
                return capitulo;
            case 12:
                return codCentro;
            case 13:
                return id;
            case 14:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 15;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Aceptadas";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "AceptadasSpecified";
                break;
            case 2:
                info.type = Double.class;
                info.name = "C_Rechazadas";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "C_RechazadasSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Centro";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CodigoUsuarioActivo";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Punto";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Rechazadas";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RechazadasSpecified";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Totales";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TotalesSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "capitulo";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "codCentro";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }
    

    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
